import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { GqlExecutionContext } from '@nestjs/graphql'; // <<<< TH√äM IMPORT N√ÄY
import { ROLES_KEY } from 'src/common/decorators/roles.decorator'; // Gi·ªØ nguy√™n ƒë∆∞·ªùng d·∫´n c·ªßa b·∫°n
import { Role } from 'src/common/enums/role.enums';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [
      // <<<< S·ª¨ D·ª§NG UserRole
      context.getHandler(),
      context.getClass(),
    ]);

    if (!requiredRoles || requiredRoles.length === 0) {
      return true; // N·∫øu kh√¥ng c√≥ vai tr√≤ n√†o ƒë∆∞·ª£c y√™u c·∫ßu, cho ph√©p truy c·∫≠p
    }

    // L·∫•y request object t·ª´ GraphQL context
    const gqlContext = GqlExecutionContext.create(context);
    const request = gqlContext.getContext().req;

    // Ki·ªÉm tra xem request v√† request.user c√≥ t·ªìn t·∫°i kh√¥ng
    if (!request || !request.user) {
      console.error(
        'RolesGuard: Request ho·∫∑c request.user kh√¥ng t·ªìn t·∫°i. ƒê·∫£m b·∫£o JwtAuthGuard (ho·∫∑c GqlAuthGuard) ch·∫°y tr∆∞·ªõc v√† th√†nh c√¥ng.',
      );
      return false;
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request
    const user = request.user as { roles: Role[]; [key: string]: any }; // Type assertion ƒë·ªÉ TypeScript bi·∫øt user c√≥ thu·ªôc t√≠nh 'roles'
    
    console.log('üîç Debug RolesGuard:');
    console.log('  - User ID:', user?.id);
    console.log('  - User email:', user?.email);
    console.log('  - User roles:', user?.roles);
    console.log('  - Required roles:', requiredRoles);
    
    // Ki·ªÉm tra xem user c√≥ thu·ªôc t√≠nh 'roles' kh√¥ng
    if (user && user.roles && Array.isArray(user.roles)) {
      // So s√°nh vai tr√≤ c·ªßa ng∆∞·ªùi d√πng v·ªõi c√°c vai tr√≤ ƒë∆∞·ª£c y√™u c·∫ßu
      const hasRole = user.roles.some((role) => requiredRoles.includes(role));
      console.log('  - Has required role:', hasRole);
      return hasRole;
    } else {
      console.error(
        'RolesGuard: Thu·ªôc t√≠nh "roles" kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá tr√™n user object.',
        user, // Log ra user object ƒë·ªÉ debug
      );
      return false; // N·∫øu kh√¥ng c√≥ thu·ªôc t√≠nh 'roles', kh√¥ng cho ph√©p
    }
  }
}
