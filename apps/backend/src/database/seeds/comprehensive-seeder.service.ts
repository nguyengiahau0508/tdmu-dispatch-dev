import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../../modules/users/entities/user.entity';
import { Department } from '../../modules/organizational/departments/entities/department.entity';
import { Position } from '../../modules/organizational/positions/entities/position.entity';
import { UnitType } from '../../modules/organizational/unit-types/entities/unit-type.entity';
import { Unit } from '../../modules/organizational/units/entities/unit.entity';
import { DocumentCategory } from '../../modules/dispatch/document-category/entities/document-category.entity';
import { DocumentType } from '../../modules/dispatch/document-types/entities/document-type.entity';
import { Document, DocumentTypeEnum, DocumentStatus, DocumentPriority } from '../../modules/dispatch/documents/entities/document.entity';
import { WorkflowTemplate } from '../../modules/workflow/workflow-templates/entities/workflow-template.entity';
import { WorkflowStep, StepType } from '../../modules/workflow/workflow-steps/entities/workflow-step.entity';
import { WorkflowInstance, WorkflowStatus } from '../../modules/workflow/workflow-instances/entities/workflow-instance.entity';
import { WorkflowActionLog, ActionType } from '../../modules/workflow/workflow-action-logs/entities/workflow-action-log.entity';
import { Assignment } from '../../modules/organizational/assignments/entities/assignment.entity';
import { UserPosition } from '../../modules/organizational/user-positions/entities/user-position.entity';
import { File } from '../../modules/files/entities/file.entity';
import { Role } from '../../common/enums/role.enums';
import * as bcrypt from 'bcrypt';

@Injectable()
export class ComprehensiveSeederService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Department)
    private readonly departmentRepository: Repository<Department>,
    @InjectRepository(Position)
    private readonly positionRepository: Repository<Position>,
    @InjectRepository(UnitType)
    private readonly unitTypeRepository: Repository<UnitType>,
    @InjectRepository(Unit)
    private readonly unitRepository: Repository<Unit>,
    @InjectRepository(DocumentCategory)
    private readonly documentCategoryRepository: Repository<DocumentCategory>,
    @InjectRepository(DocumentType)
    private readonly documentTypeRepository: Repository<DocumentType>,
    @InjectRepository(Document)
    private readonly documentRepository: Repository<Document>,
    @InjectRepository(WorkflowTemplate)
    private readonly workflowTemplateRepository: Repository<WorkflowTemplate>,
    @InjectRepository(WorkflowStep)
    private readonly workflowStepRepository: Repository<WorkflowStep>,
    @InjectRepository(WorkflowInstance)
    private readonly workflowInstanceRepository: Repository<WorkflowInstance>,
    @InjectRepository(WorkflowActionLog)
    private readonly workflowActionLogRepository: Repository<WorkflowActionLog>,
    @InjectRepository(Assignment)
    private readonly assignmentRepository: Repository<Assignment>,
    @InjectRepository(UserPosition)
    private readonly userPositionRepository: Repository<UserPosition>,
    @InjectRepository(File)
    private readonly fileRepository: Repository<File>,
  ) {}

  async checkExistingData(): Promise<boolean> {
    const userCount = await this.userRepository.count();
    const departmentCount = await this.departmentRepository.count();
    const unitCount = await this.unitRepository.count();
    const documentCount = await this.documentRepository.count();
    
    return userCount > 0 || departmentCount > 0 || unitCount > 0 || documentCount > 0;
  }

  async clearAllData(): Promise<void> {
    console.log('üóëÔ∏è X√≥a t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán c√≥...');
    
    const queryRunner = this.workflowActionLogRepository.manager.connection.createQueryRunner();
    
    try {
      await queryRunner.connect();
      await queryRunner.startTransaction();
      
      // T·∫Øt foreign key checks
      await queryRunner.query('SET FOREIGN_KEY_CHECKS = 0');
      
      // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c√°c b·∫£ng theo th·ª© t·ª±
      const tables = [
        'workflow_action_log',
        'workflow_instance', 
        'workflow_step',
        'workflow_template',
        'assignment',
        'user_position',
        'document',
        'document_type',
        'document_category',
        'unit',
        'unit_type',
        'position',
        'department',
        'file',
        'user'
      ];
      
      for (const table of tables) {
        await queryRunner.query(`DELETE FROM \`${table}\``);
        // Reset auto increment
        await queryRunner.query(`ALTER TABLE \`${table}\` AUTO_INCREMENT = 1`);
      }
      
      // B·∫≠t l·∫°i foreign key checks
      await queryRunner.query('SET FOREIGN_KEY_CHECKS = 1');
      
      await queryRunner.commitTransaction();
      console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng!');
    } catch (error) {
      await queryRunner.rollbackTransaction();
      throw error;
    } finally {
      await queryRunner.release();
    }
  }

  async seed(): Promise<void> {
    console.log('üîß B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u ƒë·∫ßy ƒë·ªß...');

    // 1. T·∫°o Unit Types
    console.log('üìã 1. T·∫°o Unit Types...');
    const unitTypes = await this.seedUnitTypes();

    // 2. T·∫°o Units
    console.log('üè¢ 2. T·∫°o Units...');
    const units = await this.seedUnits(unitTypes);

    // 3. T·∫°o Departments
    console.log('üèõÔ∏è 3. T·∫°o Departments...');
    const departments = await this.seedDepartments();

    // 4. T·∫°o Positions
    console.log('üëî 4. T·∫°o Positions...');
    const positions = await this.seedPositions(departments);

    // 5. T·∫°o Users v·ªõi ƒë·∫ßy ƒë·ªß roles
    console.log('üë• 5. T·∫°o Users...');
    const users = await this.seedUsers(positions);

    // 6. T·∫°o Files
    console.log('üìÅ 6. T·∫°o Files...');
    const files = await this.seedFiles(users);

    // 7. T·∫°o Document Categories
    console.log('üìÅ 7. T·∫°o Document Categories...');
    const documentCategories = await this.seedDocumentCategories();

    // 8. T·∫°o Document Types
    console.log('üìÑ 8. T·∫°o Document Types...');
    const documentTypes = await this.seedDocumentTypes(documentCategories);

    // 9. T·∫°o User Positions
    console.log('üë§ 9. T·∫°o User Positions...');
    await this.seedUserPositions(users, positions);

    // 10. T·∫°o Assignments
    console.log('üìã 10. T·∫°o Assignments...');
    await this.seedAssignments(users, positions, units);

    // 11. T·∫°o Workflow Templates v·ªõi ƒë·∫ßy ƒë·ªß steps
    console.log('üîÑ 11. T·∫°o Workflow Templates...');
    const templates = await this.seedWorkflowTemplates(users);

    // 12. T·∫°o Documents v·ªõi ƒë·∫ßy ƒë·ªß tr·∫°ng th√°i
    console.log('üìÑ 12. T·∫°o Documents...');
    const documents = await this.seedDocuments(documentCategories, documentTypes, files, users);

    // 13. T·∫°o Workflow Instances cho documents
    console.log('üîÑ 13. T·∫°o Workflow Instances...');
    const instances = await this.seedWorkflowInstances(templates, documents, users);

    // 14. T·∫°o Workflow Action Logs ƒë·∫ßy ƒë·ªß
    console.log('üìù 14. T·∫°o Workflow Action Logs...');
    await this.seedWorkflowActionLogs(instances, users);

    console.log('‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u ƒë·∫ßy ƒë·ªß!');
    console.log('\nüìä Th·ªëng k√™ d·ªØ li·ªáu ƒë√£ t·∫°o:');
    console.log(`- Users: ${users.length}`);
    console.log(`- Departments: ${departments.length}`);
    console.log(`- Units: ${units.length}`);
    console.log(`- Documents: ${documents.length}`);
    console.log(`- Workflow Templates: ${templates.length}`);
    console.log(`- Workflow Instances: ${instances.length}`);
  }

  private async seedUnitTypes(): Promise<UnitType[]> {
    const unitTypeData = [
      { typeName: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc', description: 'C√°c tr∆∞·ªùng ƒë·∫°i h·ªçc tr·ª±c thu·ªôc' },
      { typeName: 'Khoa', description: 'C√°c khoa trong tr∆∞·ªùng' },
      { typeName: 'Ph√≤ng Ban', description: 'C√°c ph√≤ng ban ch·ª©c nƒÉng' },
      { typeName: 'Trung t√¢m', description: 'C√°c trung t√¢m nghi√™n c·ª©u v√† ƒë√†o t·∫°o' },
      { typeName: 'Vi·ªán', description: 'C√°c vi·ªán nghi√™n c·ª©u' },
    ];

    const unitTypes = this.unitTypeRepository.create(unitTypeData);
    return await this.unitTypeRepository.save(unitTypes);
  }

  private async seedUnits(unitTypes: UnitType[]): Promise<Unit[]> {
    const unitData = [
      {
        unitName: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc Th·ªß D·∫ßu M·ªôt',
        unitTypeId: unitTypes[0].id,
        email: 'info@tdmu.edu.vn',
        phone: '0274 3846 123',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Khoa C√¥ng ngh·ªá Th√¥ng tin',
        unitTypeId: unitTypes[1].id,
        email: 'cntt@tdmu.edu.vn',
        phone: '0274 3846 124',
        establishmentDate: new Date('2010-01-01'),
      },
      {
        unitName: 'Khoa Kinh t·∫ø',
        unitTypeId: unitTypes[1].id,
        email: 'kt@tdmu.edu.vn',
        phone: '0274 3846 125',
        establishmentDate: new Date('2010-01-01'),
      },
      {
        unitName: 'Ph√≤ng ƒê√†o t·∫°o',
        unitTypeId: unitTypes[2].id,
        email: 'daotao@tdmu.edu.vn',
        phone: '0274 3846 126',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Ph√≤ng T√†i ch√≠nh - K·∫ø to√°n',
        unitTypeId: unitTypes[2].id,
        email: 'taichinh@tdmu.edu.vn',
        phone: '0274 3846 127',
        establishmentDate: new Date('2009-01-01'),
      },
    ];

    const units = this.unitRepository.create(unitData);
    return await this.unitRepository.save(units);
  }

  private async seedDepartments(): Promise<Department[]> {
    const departmentData = [
      {
        name: 'Ph√≤ng ƒê√†o t·∫°o',
        description: 'Ph√≤ng qu·∫£n l√Ω ƒë√†o t·∫°o',
        email: 'daotao@tdmu.edu.vn',
        phone: '0274 3846 126',
      },
      {
        name: 'Ph√≤ng T√†i ch√≠nh - K·∫ø to√°n',
        description: 'Ph√≤ng qu·∫£n l√Ω t√†i ch√≠nh',
        email: 'taichinh@tdmu.edu.vn',
        phone: '0274 3846 127',
      },
      {
        name: 'Ph√≤ng T·ªï ch·ª©c - H√†nh ch√≠nh',
        description: 'Ph√≤ng qu·∫£n l√Ω nh√¢n s·ª± v√† h√†nh ch√≠nh',
        email: 'tochuc@tdmu.edu.vn',
        phone: '0274 3846 129',
      },
    ];

    const departments = this.departmentRepository.create(departmentData);
    return await this.departmentRepository.save(departments);
  }

  private async seedPositions(departments: Department[]): Promise<Position[]> {
    const positionData = [
      {
        positionName: 'Hi·ªáu tr∆∞·ªüng',
        departmentId: departments[0].id,
        maxSlots: 1,
      },
      {
        positionName: 'Ph√≥ Hi·ªáu tr∆∞·ªüng',
        departmentId: departments[0].id,
        maxSlots: 2,
      },
      {
        positionName: 'Tr∆∞·ªüng ph√≤ng',
        departmentId: departments[1].id,
        maxSlots: 3,
      },
      {
        positionName: 'Nh√¢n vi√™n',
        departmentId: departments[2].id,
        maxSlots: 10,
      },
      {
        positionName: 'Gi·∫£ng vi√™n',
        departmentId: departments[0].id,
        maxSlots: 20,
      },
    ];

    const positions = this.positionRepository.create(positionData);
    return await this.positionRepository.save(positions);
  }

  private async seedUsers(positions: Position[]): Promise<User[]> {
    const hashedPassword = await bcrypt.hash('password123', 10);

    const userData = [
      {
        email: 'admin@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Admin',
        lastName: 'System',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.SYSTEM_ADMIN],
      },
      {
        email: 'hieutruong@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Nguy·ªÖn VƒÉn',
        lastName: 'Hi·ªáu Tr∆∞·ªüng',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.SYSTEM_ADMIN],
      },
      {
        email: 'phohieutruong@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Tr·∫ßn Th·ªã',
        lastName: 'Ph√≥ Hi·ªáu Tr∆∞·ªüng',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.SYSTEM_ADMIN],
      },
      {
        email: 'truongphong@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'L√™ VƒÉn',
        lastName: 'Tr∆∞·ªüng Ph√≤ng',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.DEPARTMENT_STAFF],
      },
      {
        email: 'nhanvien1@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Ph·∫°m Th·ªã',
        lastName: 'Nh√¢n Vi√™n 1',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.DEPARTMENT_STAFF],
      },
      {
        email: 'giangvien1@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'V≈© Th·ªã',
        lastName: 'Gi·∫£ng Vi√™n 1',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.CLERK],
      },
      {
        email: 'thuky1@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Ng√¥ Th·ªã',
        lastName: 'Th∆∞ K√Ω 1',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.CLERK],
      },
    ];

    const users = this.userRepository.create(userData);
    return await this.userRepository.save(users);
  }

  private async seedFiles(users: User[]): Promise<File[]> {
    const fileData = [
      {
        driveFileId: 'file1_drive_id',
        originalName: 'quyet_dinh_thanh_lap.pdf',
        mimeType: 'application/pdf',
        isPublic: false,
      },
      {
        driveFileId: 'file2_drive_id',
        originalName: 'bao_cao_tai_chinh.xlsx',
        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        isPublic: false,
      },
      {
        driveFileId: 'file3_drive_id',
        originalName: 'ke_hoach_dao_tao.docx',
        mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        isPublic: false,
      },
      {
        driveFileId: 'file4_drive_id',
        originalName: 'bien_ban_hop.pdf',
        mimeType: 'application/pdf',
        isPublic: false,
      },
      {
        driveFileId: 'file5_drive_id',
        originalName: 'hop_dong_hop_tac.pdf',
        mimeType: 'application/pdf',
        isPublic: false,
      },
    ];

    const files = this.fileRepository.create(fileData);
    return await this.fileRepository.save(files);
  }

  private async seedDocumentCategories(): Promise<DocumentCategory[]> {
    const categoryData = [
      {
        name: 'VƒÉn b·∫£n h√†nh ch√≠nh',
        description: 'C√°c lo·∫°i vƒÉn b·∫£n h√†nh ch√≠nh th√¥ng th∆∞·ªùng',
      },
      {
        name: 'VƒÉn b·∫£n ƒë√†o t·∫°o',
        description: 'C√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn c√¥ng t√°c ƒë√†o t·∫°o',
      },
      {
        name: 'VƒÉn b·∫£n t√†i ch√≠nh',
        description: 'C√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn t√†i ch√≠nh, k·∫ø to√°n',
      },
      {
        name: 'VƒÉn b·∫£n h·ª£p t√°c',
        description: 'C√°c vƒÉn b·∫£n h·ª£p t√°c v·ªõi ƒë·ªëi t√°c b√™n ngo√†i',
      },
      {
        name: 'VƒÉn b·∫£n nh√¢n s·ª±',
        description: 'C√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn nh√¢n s·ª±, c√°n b·ªô',
      },
    ];

    const categories = this.documentCategoryRepository.create(categoryData);
    return await this.documentCategoryRepository.save(categories);
  }

  private async seedDocumentTypes(categories: DocumentCategory[]): Promise<DocumentType[]> {
    const typeData = [
      {
        name: 'Quy·∫øt ƒë·ªãnh',
        description: 'VƒÉn b·∫£n quy·∫øt ƒë·ªãnh',
        documentCategoryId: categories[0].id,
      },
      {
        name: 'Ngh·ªã quy·∫øt',
        description: 'VƒÉn b·∫£n ngh·ªã quy·∫øt',
        documentCategoryId: categories[0].id,
      },
      {
        name: 'Ch·ªâ th·ªã',
        description: 'VƒÉn b·∫£n ch·ªâ th·ªã',
        documentCategoryId: categories[0].id,
      },
      {
        name: 'Th√¥ng b√°o',
        description: 'VƒÉn b·∫£n th√¥ng b√°o',
        documentCategoryId: categories[0].id,
      },
      {
        name: 'B√°o c√°o',
        description: 'VƒÉn b·∫£n b√°o c√°o',
        documentCategoryId: categories[2].id,
      },
    ];

    const types = this.documentTypeRepository.create(typeData);
    return await this.documentTypeRepository.save(types);
  }

  private async seedDocuments(
    categories: DocumentCategory[],
    types: DocumentType[],
    files: File[],
    users: User[]
  ): Promise<Document[]> {
    const documentData = [
      {
        title: 'Quy·∫øt ƒë·ªãnh th√†nh l·∫≠p khoa m·ªõi',
        content: 'Quy·∫øt ƒë·ªãnh th√†nh l·∫≠p Khoa C√¥ng ngh·ªá Th√¥ng tin',
        documentType: DocumentTypeEnum.INTERNAL,
        documentCategoryId: categories[0].id,
        fileId: parseInt(files[0].id),
        status: DocumentStatus.DRAFT,
        priority: DocumentPriority.HIGH,
        createdByUserId: users[3].id,
        deadline: new Date('2024-12-31'),
      },
      {
        title: 'B√°o c√°o t√†i ch√≠nh qu√Ω 1 nƒÉm 2024',
        content: 'B√°o c√°o t√¨nh h√¨nh t√†i ch√≠nh qu√Ω 1 nƒÉm 2024',
        documentType: DocumentTypeEnum.INTERNAL,
        documentCategoryId: categories[2].id,
        fileId: parseInt(files[1].id),
        status: DocumentStatus.PENDING,
        priority: DocumentPriority.MEDIUM,
        createdByUserId: users[4].id,
        deadline: new Date('2024-06-30'),
      },
      {
        title: 'K·∫ø ho·∫°ch ƒë√†o t·∫°o nƒÉm h·ªçc 2024-2025',
        content: 'K·∫ø ho·∫°ch ƒë√†o t·∫°o chi ti·∫øt cho nƒÉm h·ªçc m·ªõi',
        documentType: DocumentTypeEnum.INTERNAL,
        documentCategoryId: categories[1].id,
        fileId: parseInt(files[2].id),
        status: DocumentStatus.PROCESSING,
        priority: DocumentPriority.HIGH,
        createdByUserId: users[5].id,
        deadline: new Date('2024-08-31'),
      },
      {
        title: 'Bi√™n b·∫£n h·ªçp H·ªôi ƒë·ªìng tr∆∞·ªùng',
        content: 'Bi√™n b·∫£n h·ªçp H·ªôi ƒë·ªìng tr∆∞·ªùng th√°ng 3/2024',
        documentType: DocumentTypeEnum.INTERNAL,
        documentCategoryId: categories[0].id,
        fileId: parseInt(files[3].id),
        status: DocumentStatus.APPROVED,
        priority: DocumentPriority.MEDIUM,
        createdByUserId: users[6].id,
        deadline: new Date('2024-04-30'),
      },
      {
        title: 'H·ª£p ƒë·ªìng h·ª£p t√°c v·ªõi doanh nghi·ªáp ABC',
        content: 'H·ª£p ƒë·ªìng h·ª£p t√°c ƒë√†o t·∫°o v·ªõi c√¥ng ty ABC',
        documentType: DocumentTypeEnum.OUTGOING,
        documentCategoryId: categories[3].id,
        fileId: parseInt(files[4].id),
        status: DocumentStatus.DRAFT,
        priority: DocumentPriority.HIGH,
        createdByUserId: users[3].id,
        deadline: new Date('2024-12-31'),
      },
    ];

    const documents = this.documentRepository.create(documentData);
    return await this.documentRepository.save(documents);
  }

  private async seedUserPositions(users: User[], positions: Position[]): Promise<void> {
    const userPositionData = [
      {
        userId: users[0].id,
        positionId: positions[0].id,
        startDate: new Date('2020-01-01'),
        endDate: undefined,
      },
      {
        userId: users[1].id,
        positionId: positions[0].id,
        startDate: new Date('2020-01-01'),
        endDate: undefined,
      },
      {
        userId: users[2].id,
        positionId: positions[1].id,
        startDate: new Date('2020-01-01'),
        endDate: undefined,
      },
      {
        userId: users[3].id,
        positionId: positions[2].id,
        startDate: new Date('2021-01-01'),
        endDate: undefined,
      },
      {
        userId: users[4].id,
        positionId: positions[2].id,
        startDate: new Date('2021-01-01'),
        endDate: undefined,
      },
      {
        userId: users[5].id,
        positionId: positions[4].id,
        startDate: new Date('2021-01-01'),
        endDate: undefined,
      },
      {
        userId: users[6].id,
        positionId: positions[3].id,
        startDate: new Date('2022-01-01'),
        endDate: undefined,
      },
    ];

    const userPositions = this.userPositionRepository.create(userPositionData);
    await this.userPositionRepository.save(userPositions);
  }

  private async seedAssignments(users: User[], positions: Position[], units: Unit[]): Promise<void> {
    const assignmentData = [
      {
        userId: users[0].id,
        positionId: positions[0].id,
        unitId: units[0].id,
      },
      {
        userId: users[1].id,
        positionId: positions[0].id,
        unitId: units[0].id,
      },
      {
        userId: users[2].id,
        positionId: positions[1].id,
        unitId: units[0].id,
      },
      {
        userId: users[3].id,
        positionId: positions[2].id,
        unitId: units[3].id,
      },
      {
        userId: users[4].id,
        positionId: positions[2].id,
        unitId: units[4].id,
      },
      {
        userId: users[5].id,
        positionId: positions[4].id,
        unitId: units[1].id,
      },
      {
        userId: users[6].id,
        positionId: positions[3].id,
        unitId: units[3].id,
      },
    ];

    const assignments = this.assignmentRepository.create(assignmentData);
    await this.assignmentRepository.save(assignments);
  }

  private async seedWorkflowTemplates(users: User[]): Promise<WorkflowTemplate[]> {
    const templateData = [
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n th√¥ng th∆∞·ªùng',
        description: 'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n h√†nh ch√≠nh th√¥ng th∆∞·ªùng',
        isActive: true,
        createdByUserId: users[0].id,
      },
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n t√†i ch√≠nh',
        description: 'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn t√†i ch√≠nh',
        isActive: true,
        createdByUserId: users[0].id,
      },
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n ƒë√†o t·∫°o',
        description: 'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn ƒë√†o t·∫°o',
        isActive: true,
        createdByUserId: users[0].id,
      },
    ];

    const templates = this.workflowTemplateRepository.create(templateData);
    const savedTemplates = await this.workflowTemplateRepository.save(templates);

    // T·∫°o workflow steps cho t·ª´ng template
    for (const template of savedTemplates) {
      await this.createWorkflowSteps(template, users);
    }

    return savedTemplates;
  }

  private async createWorkflowSteps(template: WorkflowTemplate, users: User[]): Promise<void> {
    const stepsData = [
      {
        templateId: template.id,
        name: 'Giao vi·ªác',
        description: 'B∆∞·ªõc giao vi·ªác cho ng∆∞·ªùi th·ª±c hi·ªán',
        type: StepType.START,
        assignedRole: Role.DEPARTMENT_STAFF,
        orderNumber: 1,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'T·∫°o vƒÉn b·∫£n',
        description: 'Ng∆∞·ªùi ƒë∆∞·ª£c giao vi·ªác t·∫°o vƒÉn b·∫£n',
        type: StepType.TRANSFER,
        assignedRole: Role.CLERK,
        orderNumber: 2,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ph√™ duy·ªát tr∆∞·ªüng ph√≤ng',
        description: 'Tr∆∞·ªüng ph√≤ng ph√™ duy·ªát vƒÉn b·∫£n',
        type: StepType.APPROVAL,
        assignedRole: Role.DEPARTMENT_STAFF,
        orderNumber: 3,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ph√™ duy·ªát l√£nh ƒë·∫°o',
        description: 'L√£nh ƒë·∫°o c·∫•p cao ph√™ duy·ªát',
        type: StepType.APPROVAL,
        assignedRole: Role.SYSTEM_ADMIN,
        orderNumber: 4,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ho√†n th√†nh',
        description: 'VƒÉn b·∫£n ƒë∆∞·ª£c ph√™ duy·ªát v√† ho√†n th√†nh',
        type: StepType.END,
        assignedRole: Role.CLERK,
        orderNumber: 5,
        isActive: true,
      },
    ];

    const steps = this.workflowStepRepository.create(stepsData);
    await this.workflowStepRepository.save(steps);
  }

  private async seedWorkflowInstances(
    templates: WorkflowTemplate[],
    documents: Document[],
    users: User[]
  ): Promise<WorkflowInstance[]> {
    const instanceData = [
      {
        templateId: templates[0].id,
        documentId: documents[0].id,
        status: WorkflowStatus.IN_PROGRESS,
        currentStepId: 2, // ƒêang ·ªü b∆∞·ªõc "T·∫°o vƒÉn b·∫£n"
        createdByUserId: users[3].id,
        startedByUserId: users[3].id,
        startedAt: new Date('2024-01-15'),
      },
      {
        templateId: templates[1].id,
        documentId: documents[1].id,
        status: WorkflowStatus.IN_PROGRESS,
        currentStepId: 3, // ƒêang ·ªü b∆∞·ªõc "Ph√™ duy·ªát tr∆∞·ªüng ph√≤ng"
        createdByUserId: users[4].id,
        startedByUserId: users[4].id,
        startedAt: new Date('2024-01-20'),
      },
      {
        templateId: templates[2].id,
        documentId: documents[2].id,
        status: WorkflowStatus.IN_PROGRESS,
        currentStepId: 4, // ƒêang ·ªü b∆∞·ªõc "Ph√™ duy·ªát l√£nh ƒë·∫°o"
        createdByUserId: users[5].id,
        startedByUserId: users[5].id,
        startedAt: new Date('2024-01-25'),
      },
      {
        templateId: templates[0].id,
        documentId: documents[3].id,
        status: WorkflowStatus.COMPLETED,
        currentStepId: 5, // ƒê√£ ho√†n th√†nh
        createdByUserId: users[6].id,
        startedByUserId: users[6].id,
        startedAt: new Date('2024-01-10'),
        completedAt: new Date('2024-01-12'),
      },
      {
        templateId: templates[1].id,
        documentId: documents[4].id,
        status: WorkflowStatus.IN_PROGRESS,
        currentStepId: 2, // ƒêang ·ªü b∆∞·ªõc "T·∫°o vƒÉn b·∫£n"
        createdByUserId: users[3].id,
        startedByUserId: users[3].id,
        startedAt: new Date('2024-02-01'),
      },
    ];

    const instances = this.workflowInstanceRepository.create(instanceData);
    return await this.workflowInstanceRepository.save(instances);
  }

  private async seedWorkflowActionLogs(instances: WorkflowInstance[], users: User[]): Promise<void> {
    const actionLogData = [
      // Instance 1 - ƒêang ·ªü b∆∞·ªõc 2
      {
        instanceId: instances[0].id,
        stepId: 1,
        actionByUserId: users[3].id,
        actionType: ActionType.START,
        actionAt: new Date('2024-01-15 09:00:00'),
        note: 'B·∫Øt ƒë·∫ßu quy tr√¨nh ph√™ duy·ªát',
      },
      {
        instanceId: instances[0].id,
        stepId: 2,
        actionByUserId: users[6].id,
        actionType: ActionType.TRANSFER,
        actionAt: new Date('2024-01-16 14:30:00'),
        note: 'ƒê√£ t·∫°o vƒÉn b·∫£n v√† chuy·ªÉn cho tr∆∞·ªüng ph√≤ng',
      },

      // Instance 2 - ƒêang ·ªü b∆∞·ªõc 3
      {
        instanceId: instances[1].id,
        stepId: 1,
        actionByUserId: users[4].id,
        actionType: ActionType.START,
        actionAt: new Date('2024-01-20 08:00:00'),
        note: 'B·∫Øt ƒë·∫ßu quy tr√¨nh ph√™ duy·ªát t√†i ch√≠nh',
      },
      {
        instanceId: instances[1].id,
        stepId: 2,
        actionByUserId: users[6].id,
        actionType: ActionType.TRANSFER,
        actionAt: new Date('2024-01-21 10:15:00'),
        note: 'ƒê√£ t·∫°o b√°o c√°o t√†i ch√≠nh',
      },
      {
        instanceId: instances[1].id,
        stepId: 3,
        actionByUserId: users[3].id,
        actionType: ActionType.APPROVE,
        actionAt: new Date('2024-01-22 16:45:00'),
        note: 'Tr∆∞·ªüng ph√≤ng ƒë√£ ph√™ duy·ªát',
      },

      // Instance 3 - ƒêang ·ªü b∆∞·ªõc 4
      {
        instanceId: instances[2].id,
        stepId: 1,
        actionByUserId: users[5].id,
        actionType: ActionType.START,
        actionAt: new Date('2024-01-25 09:30:00'),
        note: 'B·∫Øt ƒë·∫ßu quy tr√¨nh ph√™ duy·ªát ƒë√†o t·∫°o',
      },
      {
        instanceId: instances[2].id,
        stepId: 2,
        actionByUserId: users[6].id,
        actionType: ActionType.TRANSFER,
        actionAt: new Date('2024-01-26 11:20:00'),
        note: 'ƒê√£ t·∫°o k·∫ø ho·∫°ch ƒë√†o t·∫°o',
      },
      {
        instanceId: instances[2].id,
        stepId: 3,
        actionByUserId: users[4].id,
        actionType: ActionType.APPROVE,
        actionAt: new Date('2024-01-27 15:10:00'),
        note: 'Tr∆∞·ªüng ph√≤ng ƒë√£ ph√™ duy·ªát',
      },

      // Instance 4 - ƒê√£ ho√†n th√†nh
      {
        instanceId: instances[3].id,
        stepId: 1,
        actionByUserId: users[6].id,
        actionType: ActionType.START,
        actionAt: new Date('2024-01-10 08:00:00'),
        note: 'B·∫Øt ƒë·∫ßu quy tr√¨nh ph√™ duy·ªát',
      },
      {
        instanceId: instances[3].id,
        stepId: 2,
        actionByUserId: users[6].id,
        actionType: ActionType.TRANSFER,
        actionAt: new Date('2024-01-11 10:30:00'),
        note: 'ƒê√£ t·∫°o bi√™n b·∫£n h·ªçp',
      },
      {
        instanceId: instances[3].id,
        stepId: 3,
        actionByUserId: users[3].id,
        actionType: ActionType.APPROVE,
        actionAt: new Date('2024-01-11 14:15:00'),
        note: 'Tr∆∞·ªüng ph√≤ng ƒë√£ ph√™ duy·ªát',
      },
      {
        instanceId: instances[3].id,
        stepId: 4,
        actionByUserId: users[1].id,
        actionType: ActionType.APPROVE,
        actionAt: new Date('2024-01-12 09:45:00'),
        note: 'Hi·ªáu tr∆∞·ªüng ƒë√£ ph√™ duy·ªát',
      },
      {
        instanceId: instances[3].id,
        stepId: 5,
        actionByUserId: users[6].id,
        actionType: ActionType.COMPLETE,
        actionAt: new Date('2024-01-12 16:00:00'),
        note: 'Quy tr√¨nh ƒë√£ ho√†n th√†nh',
      },

      // Instance 5 - ƒêang ·ªü b∆∞·ªõc 2
      {
        instanceId: instances[4].id,
        stepId: 1,
        actionByUserId: users[3].id,
        actionType: ActionType.START,
        actionAt: new Date('2024-02-01 08:30:00'),
        note: 'B·∫Øt ƒë·∫ßu quy tr√¨nh ph√™ duy·ªát h·ª£p ƒë·ªìng',
      },
    ];

    const actionLogs = this.workflowActionLogRepository.create(actionLogData);
    await this.workflowActionLogRepository.save(actionLogs);
  }
}
