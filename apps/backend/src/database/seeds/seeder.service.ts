import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../../modules/users/entities/user.entity';
import { Department } from '../../modules/organizational/departments/entities/department.entity';
import { Position } from '../../modules/organizational/positions/entities/position.entity';
import { UnitType } from '../../modules/organizational/unit-types/entities/unit-type.entity';
import { Unit } from '../../modules/organizational/units/entities/unit.entity';
import { DocumentCategory } from '../../modules/dispatch/document-category/entities/document-category.entity';
import { DocumentType } from '../../modules/dispatch/document-types/entities/document-type.entity';
import { WorkflowTemplate } from '../../modules/workflow/workflow-templates/entities/workflow-template.entity';
import {
  WorkflowStep,
  StepType,
} from '../../modules/workflow/workflow-steps/entities/workflow-step.entity';
import { Role } from '../../common/enums/role.enums';
import * as bcrypt from 'bcrypt';

@Injectable()
export class SeederService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Department)
    private readonly departmentRepository: Repository<Department>,
    @InjectRepository(Position)
    private readonly positionRepository: Repository<Position>,
    @InjectRepository(UnitType)
    private readonly unitTypeRepository: Repository<UnitType>,
    @InjectRepository(Unit)
    private readonly unitRepository: Repository<Unit>,
    @InjectRepository(DocumentCategory)
    private readonly documentCategoryRepository: Repository<DocumentCategory>,
    @InjectRepository(DocumentType)
    private readonly documentTypeRepository: Repository<DocumentType>,
    @InjectRepository(WorkflowTemplate)
    private readonly workflowTemplateRepository: Repository<WorkflowTemplate>,
    @InjectRepository(WorkflowStep)
    private readonly workflowStepRepository: Repository<WorkflowStep>,
  ) {}

  async checkExistingData(): Promise<boolean> {
    const userCount = await this.userRepository.count();
    const departmentCount = await this.departmentRepository.count();
    const unitCount = await this.unitRepository.count();

    return userCount > 0 || departmentCount > 0 || unitCount > 0;
  }

  async clearAllData(): Promise<void> {
    // X√≥a theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key constraint
    await this.workflowStepRepository.clear();
    await this.workflowTemplateRepository.clear();
    await this.documentTypeRepository.clear();
    await this.documentCategoryRepository.clear();
    await this.unitRepository.clear();
    await this.unitTypeRepository.clear();
    await this.positionRepository.clear();
    await this.departmentRepository.clear();
    await this.userRepository.clear();
  }

  async seed(): Promise<void> {
    console.log('üîß T·∫°o d·ªØ li·ªáu m·∫´u...');

    // 1. T·∫°o Unit Types
    console.log('üìã T·∫°o Unit Types...');
    const unitTypes = await this.seedUnitTypes();

    // 2. T·∫°o Units
    console.log('üè¢ T·∫°o Units...');
    const units = await this.seedUnits(unitTypes);

    // 3. T·∫°o Departments
    console.log('üèõÔ∏è T·∫°o Departments...');
    const departments = await this.seedDepartments();

    // 4. T·∫°o Positions
    console.log('üëî T·∫°o Positions...');
    const positions = await this.seedPositions(departments);

    // 5. T·∫°o Users
    console.log('üë• T·∫°o Users...');
    const users = await this.seedUsers(positions);

    // 6. T·∫°o Document Categories
    console.log('üìÅ T·∫°o Document Categories...');
    const documentCategories = await this.seedDocumentCategories();

    // 7. T·∫°o Document Types
    console.log('üìÑ T·∫°o Document Types...');
    await this.seedDocumentTypes(documentCategories);

    // 8. T·∫°o Workflow Templates
    console.log('üîÑ T·∫°o Workflow Templates...');
    await this.seedWorkflowTemplates(users);

    console.log('‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!');
  }

  private async seedUnitTypes(): Promise<UnitType[]> {
    const unitTypeData = [
      {
        typeName: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc',
        description: 'C√°c tr∆∞·ªùng ƒë·∫°i h·ªçc tr·ª±c thu·ªôc',
      },
      { typeName: 'Khoa', description: 'C√°c khoa trong tr∆∞·ªùng' },
      { typeName: 'Ph√≤ng Ban', description: 'C√°c ph√≤ng ban ch·ª©c nƒÉng' },
      {
        typeName: 'Trung t√¢m',
        description: 'C√°c trung t√¢m nghi√™n c·ª©u v√† ƒë√†o t·∫°o',
      },
      { typeName: 'Vi·ªán', description: 'C√°c vi·ªán nghi√™n c·ª©u' },
    ];

    const unitTypes = this.unitTypeRepository.create(unitTypeData);
    return await this.unitTypeRepository.save(unitTypes);
  }

  private async seedUnits(unitTypes: UnitType[]): Promise<Unit[]> {
    const unitData = [
      {
        unitName: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc Th·ªß D·∫ßu M·ªôt',
        unitTypeId: unitTypes[0].id,
        email: 'info@tdmu.edu.vn',
        phone: '0274 3846 123',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Khoa C√¥ng ngh·ªá Th√¥ng tin',
        unitTypeId: unitTypes[1].id,
        parentUnitId: 1,
        email: 'cntt@tdmu.edu.vn',
        phone: '0274 3846 456',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Khoa Kinh t·∫ø',
        unitTypeId: unitTypes[1].id,
        parentUnitId: 1,
        email: 'kinhte@tdmu.edu.vn',
        phone: '0274 3846 789',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Ph√≤ng ƒê√†o t·∫°o',
        unitTypeId: unitTypes[2].id,
        parentUnitId: 1,
        email: 'daotao@tdmu.edu.vn',
        phone: '0274 3846 101',
        establishmentDate: new Date('2009-01-01'),
      },
      {
        unitName: 'Ph√≤ng T√†i ch√≠nh - K·∫ø to√°n',
        unitTypeId: unitTypes[2].id,
        parentUnitId: 1,
        email: 'taichinh@tdmu.edu.vn',
        phone: '0274 3846 102',
        establishmentDate: new Date('2009-01-01'),
      },
    ];

    const units = this.unitRepository.create(unitData);
    return await this.unitRepository.save(units);
  }

  private async seedDepartments(): Promise<Department[]> {
    const departmentData = [
      {
        name: 'Ph√≤ng ƒê√†o t·∫°o',
        description: 'Qu·∫£n l√Ω c√¥ng t√°c ƒë√†o t·∫°o v√† sinh vi√™n',
      },
      {
        name: 'Ph√≤ng T√†i ch√≠nh - K·∫ø to√°n',
        description: 'Qu·∫£n l√Ω t√†i ch√≠nh v√† k·∫ø to√°n c·ªßa tr∆∞·ªùng',
      },
      {
        name: 'Ph√≤ng T·ªï ch·ª©c - H√†nh ch√≠nh',
        description: 'Qu·∫£n l√Ω nh√¢n s·ª± v√† h√†nh ch√≠nh',
      },
      {
        name: 'Ph√≤ng C√¥ng t√°c Sinh vi√™n',
        description: 'Qu·∫£n l√Ω ho·∫°t ƒë·ªông sinh vi√™n',
      },
      {
        name: 'Ph√≤ng Khoa h·ªçc C√¥ng ngh·ªá',
        description: 'Qu·∫£n l√Ω nghi√™n c·ª©u khoa h·ªçc',
      },
    ];

    const departments = this.departmentRepository.create(departmentData);
    return await this.departmentRepository.save(departments);
  }

  private async seedPositions(departments: Department[]): Promise<Position[]> {
    const positionData = [
      {
        positionName: 'Hi·ªáu tr∆∞·ªüng',
        departmentId: departments[0].id,
        maxSlots: 1,
      },
      {
        positionName: 'Ph√≥ Hi·ªáu tr∆∞·ªüng',
        departmentId: departments[0].id,
        maxSlots: 3,
      },
      {
        positionName: 'Tr∆∞·ªüng ph√≤ng ƒê√†o t·∫°o',
        departmentId: departments[0].id,
        maxSlots: 1,
      },
      {
        positionName: 'Nh√¢n vi√™n ƒê√†o t·∫°o',
        departmentId: departments[0].id,
        maxSlots: 5,
      },
      {
        positionName: 'Tr∆∞·ªüng ph√≤ng T√†i ch√≠nh',
        departmentId: departments[1].id,
        maxSlots: 1,
      },
      {
        positionName: 'K·∫ø to√°n tr∆∞·ªüng',
        departmentId: departments[1].id,
        maxSlots: 1,
      },
      {
        positionName: 'Nh√¢n vi√™n K·∫ø to√°n',
        departmentId: departments[1].id,
        maxSlots: 3,
      },
      {
        positionName: 'Tr∆∞·ªüng ph√≤ng T·ªï ch·ª©c',
        departmentId: departments[2].id,
        maxSlots: 1,
      },
      {
        positionName: 'Nh√¢n vi√™n H√†nh ch√≠nh',
        departmentId: departments[2].id,
        maxSlots: 4,
      },
    ];

    const positions = this.positionRepository.create(positionData);
    return await this.positionRepository.save(positions);
  }

  private async seedUsers(positions: Position[]): Promise<User[]> {
    const hashedPassword = await bcrypt.hash('123456', 10);

    const userData = [
      {
        email: 'admin@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Admin',
        lastName: 'System',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.SYSTEM_ADMIN],
      },
      {
        email: 'hieutruong@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Nguy·ªÖn VƒÉn',
        lastName: 'Hi·ªáu Tr∆∞·ªüng',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.UNIVERSITY_LEADER],
      },
      {
        email: 'phohieutruong@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Tr·∫ßn Th·ªã',
        lastName: 'Ph√≥ Hi·ªáu Tr∆∞·ªüng',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.UNIVERSITY_LEADER],
      },
      {
        email: 'daotao@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'L√™ VƒÉn',
        lastName: 'ƒê√†o T·∫°o',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.DEPARTMENT_STAFF],
      },
      {
        email: 'taichinh@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Ph·∫°m Th·ªã',
        lastName: 'T√†i Ch√≠nh',
        isActive: true,
        isFirstLogin: false,
        roles: [Role.DEPARTMENT_STAFF],
      },
      {
        email: 'user1@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Nguy·ªÖn VƒÉn',
        lastName: 'A',
        isActive: true,
        isFirstLogin: true,
        roles: [Role.BASIC_USER],
      },
      {
        email: 'user2@tdmu.edu.vn',
        passwordHash: hashedPassword,
        firstName: 'Tr·∫ßn Th·ªã',
        lastName: 'B',
        isActive: true,
        isFirstLogin: true,
        roles: [Role.BASIC_USER],
      },
    ];

    const users = this.userRepository.create(userData);
    return await this.userRepository.save(users);
  }

  private async seedDocumentCategories(): Promise<DocumentCategory[]> {
    const categoryData = [
      {
        name: 'VƒÉn b·∫£n h√†nh ch√≠nh',
        description: 'C√°c lo·∫°i vƒÉn b·∫£n h√†nh ch√≠nh th√¥ng th∆∞·ªùng',
      },
      {
        name: 'VƒÉn b·∫£n ƒë√†o t·∫°o',
        description: 'VƒÉn b·∫£n li√™n quan ƒë·∫øn c√¥ng t√°c ƒë√†o t·∫°o',
      },
      {
        name: 'VƒÉn b·∫£n t√†i ch√≠nh',
        description: 'VƒÉn b·∫£n li√™n quan ƒë·∫øn t√†i ch√≠nh, k·∫ø to√°n',
      },
      {
        name: 'VƒÉn b·∫£n nghi√™n c·ª©u',
        description: 'VƒÉn b·∫£n li√™n quan ƒë·∫øn nghi√™n c·ª©u khoa h·ªçc',
      },
      {
        name: 'VƒÉn b·∫£n sinh vi√™n',
        description: 'VƒÉn b·∫£n li√™n quan ƒë·∫øn sinh vi√™n',
      },
    ];

    const categories = this.documentCategoryRepository.create(categoryData);
    return await this.documentCategoryRepository.save(categories);
  }

  private async seedDocumentTypes(
    categories: DocumentCategory[],
  ): Promise<void> {
    const typeData = [
      {
        name: 'Quy·∫øt ƒë·ªãnh',
        description: 'VƒÉn b·∫£n quy·∫øt ƒë·ªãnh c·ªßa l√£nh ƒë·∫°o',
      },
      {
        name: 'C√¥ng vƒÉn',
        description: 'VƒÉn b·∫£n c√¥ng vƒÉn h√†nh ch√≠nh',
      },
      {
        name: 'Th√¥ng b√°o',
        description: 'VƒÉn b·∫£n th√¥ng b√°o',
      },
      {
        name: 'B√°o c√°o',
        description: 'VƒÉn b·∫£n b√°o c√°o',
      },
      {
        name: 'K·∫ø ho·∫°ch',
        description: 'VƒÉn b·∫£n k·∫ø ho·∫°ch',
      },
      {
        name: 'Bi√™n b·∫£n',
        description: 'VƒÉn b·∫£n bi√™n b·∫£n h·ªçp, l√†m vi·ªác',
      },
      {
        name: 'H·ª£p ƒë·ªìng',
        description: 'VƒÉn b·∫£n h·ª£p ƒë·ªìng',
      },
      {
        name: 'ƒê∆°n t·ª´',
        description: 'C√°c lo·∫°i ƒë∆°n t·ª´, ƒë∆°n ƒë·ªÅ ngh·ªã',
      },
    ];

    const types = this.documentTypeRepository.create(typeData);
    await this.documentTypeRepository.save(types);
  }

  private async seedWorkflowTemplates(users: User[]): Promise<void> {
    const templateData = [
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n th√¥ng th∆∞·ªùng',
        description:
          'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n h√†nh ch√≠nh th√¥ng th∆∞·ªùng',
        isActive: true,
        createdByUserId: users[0].id,
      },
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n t√†i ch√≠nh',
        description:
          'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn t√†i ch√≠nh',
        isActive: true,
        createdByUserId: users[0].id,
      },
      {
        name: 'Quy tr√¨nh ph√™ duy·ªát vƒÉn b·∫£n ƒë√†o t·∫°o',
        description:
          'Quy tr√¨nh ph√™ duy·ªát cho c√°c vƒÉn b·∫£n li√™n quan ƒë·∫øn ƒë√†o t·∫°o',
        isActive: true,
        createdByUserId: users[0].id,
      },
    ];

    const templates = this.workflowTemplateRepository.create(templateData);
    const savedTemplates =
      await this.workflowTemplateRepository.save(templates);

    // T·∫°o workflow steps cho t·ª´ng template
    for (const template of savedTemplates) {
      await this.createWorkflowSteps(template, users);
    }
  }

  private async createWorkflowSteps(
    template: WorkflowTemplate,
    users: User[],
  ): Promise<void> {
    const stepsData = [
      {
        templateId: template.id,
        name: 'Giao vi·ªác',
        description: 'B∆∞·ªõc giao vi·ªác cho ng∆∞·ªùi th·ª±c hi·ªán',
        type: StepType.START,
        assignedRole: Role.DEPARTMENT_STAFF,
        orderNumber: 1,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'T·∫°o vƒÉn b·∫£n',
        description: 'Ng∆∞·ªùi ƒë∆∞·ª£c giao vi·ªác t·∫°o vƒÉn b·∫£n',
        type: StepType.TRANSFER,
        assignedRole: Role.CLERK,
        orderNumber: 2,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ph√™ duy·ªát tr∆∞·ªüng ph√≤ng',
        description: 'Ph√™ duy·ªát b·ªüi tr∆∞·ªüng ph√≤ng ban',
        type: StepType.APPROVAL,
        assignedRole: Role.DEPARTMENT_STAFF,
        orderNumber: 3,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ph√™ duy·ªát ph√≥ hi·ªáu tr∆∞·ªüng',
        description: 'Ph√™ duy·ªát b·ªüi ph√≥ hi·ªáu tr∆∞·ªüng',
        type: StepType.APPROVAL,
        assignedRole: Role.UNIVERSITY_LEADER,
        orderNumber: 4,
        isActive: true,
      },
      {
        templateId: template.id,
        name: 'Ph√™ duy·ªát hi·ªáu tr∆∞·ªüng',
        description: 'Ph√™ duy·ªát cu·ªëi c√πng b·ªüi hi·ªáu tr∆∞·ªüng',
        type: StepType.END,
        assignedRole: Role.UNIVERSITY_LEADER,
        orderNumber: 5,
        isActive: true,
      },
    ];

    const steps = this.workflowStepRepository.create(stepsData);
    await this.workflowStepRepository.save(steps);
  }
}
